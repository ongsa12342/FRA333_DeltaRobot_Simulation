import numpy as np

class delta_robot_model:
    def __init__(self, frame_lenght, endeffector_lenght, 
                 upper_link, lower_link, upper_link_mass, 
                 lower_link_mass, endeffector_mass):
        # user define parameter
        self.f = frame_lenght
        self.e = endeffector_lenght
        self.rf = upper_link
        self.re = lower_link
        self.m = [endeffector_mass, upper_link_mass, lower_link_mass]

        # robot constant
        self.r = (self.f-self.e)/(2*np.sqrt(3))
        self.alpha = [0 - 90, 120 - 90, 240 - 90]
        self.theta2 = np.array([0, 0, 0]).reshape(3, 1)
        self.theta3 = np.array([0, 0, 0]).reshape(3, 1)

        # state in joint space
        self.q = np.array([0, 0, 0]).reshape(3, 1)
        self.qd = np.array([0, 0, 0]).reshape(3, 1)
        self.qdd = np.array([0, 0, 0]).reshape(3, 1)

        # state in cartesian space
        self.p = np.array([0, 0, 0]).reshape(3, 1)
        self.pd = np.array([0, 0, 0]).reshape(3, 1)
        self.pdd = np.array([0, 0, 0]).reshape(3, 1)

    def set_initial_pose(self, pose : list, space : str):
        if space == "joint":
            self.q = np.array(pose).reshape(3, 1)
            *_, self.p = self.forward_pose_kinematic(self.q)
        elif space == "cartesian":
            self.p = np.array(pose).reshape(3, 1)
            self.q = self.inverse_pose_kinematic(self.p)
        else : 
            return 0
        return 1
    
    def forward_pose_kinematic(self, q : np):
        t = (self.f-self.e)*np.tan(np.deg2rad(30))/2

        y1 = -(self.f*np.tan(np.deg2rad(30))/2 + self.rf*np.cos(np.deg2rad(q[0][0])))
        z1 = -self.rf*np.sin(np.deg2rad(q[0][0]))

        y2 = (self.f*np.tan(np.deg2rad(30))/2 + self.rf*np.cos(np.deg2rad(q[1][0])))*np.sin(np.deg2rad(30))
        x2 = y2*np.tan(np.deg2rad(60))
        z2 = -self.rf*np.sin(np.deg2rad(q[1][0]))

        y3 = (self.f*np.tan(np.deg2rad(30))/2 + self.rf*np.cos(np.deg2rad(q[2][0])))*np.sin(np.deg2rad(30))
        x3 = -y3*np.tan(np.deg2rad(60))
        z3 = -self.rf*np.sin(np.deg2rad(q[2][0]))

        y1_e = -(t + self.rf*np.cos(np.deg2rad(q[0][0])))
        z1_e = -self.rf*np.sin(np.deg2rad(q[0][0]))

        y2_e = (t + self.rf*np.cos(np.deg2rad(q[1][0])))*np.sin(np.deg2rad(30))
        x2_e = y2_e*np.tan(np.deg2rad(60))
        z2_e = -self.rf*np.sin(np.deg2rad(q[1][0]))

        y3_e = (t + self.rf*np.cos(np.deg2rad(q[2][0])))*np.sin(np.deg2rad(30))
        x3_e = -y3_e*np.tan(np.deg2rad(60))
        z3_e = -self.rf*np.sin(np.deg2rad(q[2][0]))

        dnm = (y2_e-y1_e)*x3_e-(y3_e-y1_e)*x2_e

        w1 = y1_e*y1_e + z1_e*z1_e
        w2 = x2_e*x2_e + y2_e*y2_e + z2_e*z2_e
        w3 = x3_e*x3_e + y3_e*y3_e + z3_e*z3_e
        
        #x = (a1*z + b1)/dnm
        a1 = (z2_e-z1_e)*(y3_e-y1_e)-(z3_e-z1_e)*(y2_e-y1_e)
        b1 = -((w2-w1)*(y3_e-y1_e)-(w3-w1)*(y2_e-y1_e))/2.0

        #y = (a2*z + b2)/dnm
        a2 = -(z2_e-z1_e)*x3_e+(z3_e-z1_e)*x2_e
        b2 = ((w2-w1)*x3_e - (w3-w1)*x2_e)/2.0

        #a*z^2 + b*z + c = 0
        a = a1*a1 + a2*a2 + dnm*dnm
        b = 2*(a1*b1 + a2*(b2-y1_e*dnm) - z1_e*dnm*dnm)
        c = (b2-y1_e*dnm)*(b2-y1_e*dnm) + b1*b1 + dnm*dnm*(z1_e*z1_e - self.re*self.re)

        #discriminant
        d = b*b - 4.0*a*c
        if (d < 0): return -1 #// non-existing point

        z0 = -0.5*(b+np.sqrt(d))/a
        x0 = (a1*z0 + b1)/dnm
        y0 = (a2*z0 + b2)/dnm

        pos0 = np.array([x0, y0, z0]).reshape(3, 1)
        pos1 = np.array([0, y1, z1]).reshape(3, 1)
        pos2 = np.array([x2, y2, z2]).reshape(3, 1)
        pos3 = np.array([x3, y3, z3]).reshape(3, 1)
        
        return [pos1, pos2, pos3, pos0]

    def inverse_pose_kinematic(self, p : np):
        q_inv = np.array([[0, 0, 0]]).T.astype(float)
        if(self.calcAngleYZ(p[0][0], p[1][0], p[2][0]) != 0.0):
            q_inv[0][0] = self.calcAngleYZ(p[0][0], p[1][0], p[2][0])
            q_inv[1][0] = self.calcAngleYZ(p[0][0]*np.cos(np.deg2rad(120)) + p[1][0]*np.sin(np.deg2rad(120)), p[1][0]*np.cos(np.deg2rad(120))-p[0][0]*np.sin(np.deg2rad(120)), p[2][0])  #rotate coords to +120 deg
            q_inv[2][0] = self.calcAngleYZ(p[0][0]*np.cos(np.deg2rad(120)) - p[1][0]*np.sin(np.deg2rad(120)), p[1][0]*np.cos(np.deg2rad(120))+p[0][0]*np.sin(np.deg2rad(120)), p[2][0])  #rotate coords to -120 deg
        else: return -999.0

        return q_inv
    
    def dynamic_model(self, T : np, Fext : np, dt):

        try:
            *_, self.p = self.forward_pose_kinematic(self.q) # x, y, z
            self.theta2, self.theta3 = self.find_theta(self.p)

            qdii = ((np.pi / 180) ** 2) * np.multiply(self.qd, self.qd)
            qdij = ((np.pi / 180) ** 2) * np.array([self.qd[0] * self.qd[1],
                                                    self.qd[0] * self.qd[2],
                                                    self.qd[1] * self.qd[2]]).reshape(3, 1)

            M = np.array([self.m[0] + (3 * self.m[2] / 2), 0, 0,
                        0, self.m[0] + (3 * self.m[2] / 2), 0,
                        0, 0, self.m[0] + (3 * self.m[2] / 2)]).reshape(3, 3)
            I = rf * np.array([(self.m[1] / 3) + (self.m[2] / 2), 0, 0,
                            0, (self.m[1] / 3) + (self.m[2] / 2), 0,
                            0, 0, (self.m[1] / 3) + (self.m[2] / 2)]).reshape(3, 3)
            J = self.MatrixJ(self.q, self.theta2, self.theta3)
            D = self.MatrixD(self.q, self.theta2, self.theta3)
            E = self.MatrixE(self.q, self.theta2, self.theta3)
            g = np.array([0, 0, -9.81]).reshape(3, 1)
            v = np.array([0, 0, 0]).reshape(3, 1)

            a1 = [0, 0, 0]
            a2 = [0, 0, 0]
            a3 = [0, 0, 0]
            Ki = [0, 0, 0]
            for i in range(3):
                a1[i] = self.p[0] + (self.r * np.cos(np.deg2rad(self.alpha[i]))) - (self.rf * np.cos(np.deg2rad(self.q[i])) * np.cos(np.deg2rad(self.alpha[i])))
                a2[i] = self.p[1] + (self.r * np.sin(np.deg2rad(self.alpha[i]))) - (self.rf * np.cos(np.deg2rad(self.q[i])) * np.sin(np.deg2rad(self.alpha[i])))
                a3[i] = self.p[2] - (self.rf * np.sin(np.deg2rad(self.q[i])))
                v[i] = (self.m[1] + self.m[2]) * 9.81 * self.rf * np.cos(np.deg2rad(self.q[i])) / 2
                Ki[i] = ((((self.p[0] * np.cos(np.deg2rad(self.alpha[i]))) + (self.p[1] * np.sin(np.deg2rad(self.alpha[i]))) + self.r) * np.sin(np.deg2rad(self.q[i]))) - (self.p[2] * np.cos(np.deg2rad(self.q[i]))))[0]
            A = np.array([a1[0], a1[1], a1[2],
                        a2[0], a2[1], a2[2],
                        a3[0], a3[1], a3[2]]).reshape(3, 3)
            K = np.array([Ki[0], 0, 0,
                        0, Ki[1], 0,
                        0, 0, Ki[2]]).reshape(3, 3)

            self.qdd = np.linalg.inv(I - (K@np.linalg.inv(A)@M@J))@(T - v + (K@np.linalg.inv(A)@((M@(g - (D@qdii) - (E@qdij))) - Fext)))

            a = J@self.qdd + D@qdii + E@qdij
            print(a)

            self.qdd = self.qdd * 180 / np.pi
            self.qd = self.qd + (self.qdd * dt)
            self.q = self.q + (self.qd * dt)

            
        except:
            # print("error")
            pass

        return self.q, self.qd, self.qdd
    
    def calcAngleYZ(self, x0, y0, z0):

        y1 = -0.5 * 0.57735 * self.f # f/2 * tg 30
        y0 -= 0.5 * 0.57735 * self.e    # shift center to edge
        # z = a + b*y
        a = (x0*x0 + y0*y0 + z0*z0 +self.rf*self.rf - self.re*self.re - y1*y1)/(2*z0)
        b = (y1-y0)/z0
        # discriminant
        d = -(a+b*y1)*(a+b*y1)+self.rf*(b*b*self.rf+self.rf)
        if (d < 0): return -999.0 # non-existing point
        yj = (y1 - a*b - np.sqrt(d))/(b*b + 1) # choosing outer point
        zj = a + b*yj
        y_offset = 180.0 if yj > y1 else 0.0
        theta = np.degrees(np.arctan2(-zj, (y1 - yj))) + y_offset
        return theta
    
    def find_theta(self, pos):
        
        A_y1 = -self.f*np.tan(np.deg2rad(30))/2 
        A_z1 = 0

        A_y2 = self.f*np.tan(np.deg2rad(30))/2 * np.sin(np.deg2rad(30))
        A_z2 = 0

        A_y3 = self.f*np.tan(np.deg2rad(30))/2 * np.sin(np.deg2rad(30))
        A_z3 = 0

        C_x1 = pos[0][0]
        C_y1 = pos[1][0] - self.e*np.tan(np.deg2rad(30))/2
        C_z1 = pos[2][0]

        C_x2 = pos[0][0] + self.e*np.tan(np.deg2rad(30))/2 * np.cos(np.deg2rad(30))
        C_y2 = pos[1][0] + self.e*np.tan(np.deg2rad(30))/2 * np.sin(np.deg2rad(30))
        C_z2 = pos[2][0] 

        C_x3 = pos[0][0] - self.e*np.tan(np.deg2rad(30))/2 * np.cos(np.deg2rad(30))
        C_y3 = pos[1][0] + self.e*np.tan(np.deg2rad(30))/2 * np.sin(np.deg2rad(30))
        C_z3 = pos[2][0]

        AC1 = np.sqrt((A_y1-C_y1)**2 + (A_z1-C_z1)**2)
        AC2 = np.sqrt((A_y2-C_y2)**2 + (A_z2-C_z2)**2)
        AC3 = np.sqrt((A_y3-C_y3)**2 + (A_z3-C_z3)**2)

        theta2 = np.array([[0, 0, 0]]).T.astype(float)
        theta2[0][0] = np.arccos((AC1**2 - self.rf**2 - re**2)/(2*self.rf*re))
        theta2[1][0] = np.arccos((AC2**2 - self.rf**2 - re**2)/(2*self.rf*re))
        theta2[2][0] = np.arccos((AC3**2 - self.rf**2 - re**2)/(2*self.rf*re))

        theta3 = np.array([[0, 0, 0]]).T.astype(float)
        theta3[0][0] = 90 - np.rad2deg(np.arcsin(C_x1/re))
        theta3[1][0] = 90 - np.rad2deg(np.arcsin(C_x2/re))
        theta3[2][0] = 90 - np.rad2deg(np.arcsin(C_x3/re)) 

        return theta2, theta3

    def MatrixJ(self, q, theta2, theta3):
            pi = np.pi
            J11_numerator = (
                self.rf * np.sin((pi * theta2[0][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) * (
                    3 ** (1/2) * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((pi * theta3[2][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) +
                    3 ** (1/2) * np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.cos((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180) -
                    np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180) +
                    np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180)
                )
            )
            
            J11_denominator = (
                3 ** (1/2) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * theta3[1][0]) / 180) * np.cos((pi * theta3[2][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) +
                3 ** (1/2) * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((pi * theta3[0][0]) / 180) * np.cos((pi * theta3[2][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) +
                3 ** (1/2) * np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.cos((pi * theta3[0][0]) / 180) * np.cos((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180) -
                np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((pi * theta3[2][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) +
                np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * theta3[2][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) +
                np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.cos((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[2][0]) / 180) -
                np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[2][0]) / 180) -
                np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.cos((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180) +
                np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180) +
                3 ** (1/2) * np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180) +
                3 ** (1/2) * np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180) +
                3 ** (1/2) * np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180)
            )

            J11 = J11_numerator/J11_denominator

            J12_numerator = (
                -self.rf * np.sin((pi * theta2[1][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) * (
                    3 ** (1/2) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * theta3[2][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) +
                    2 * np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[2][0]) / 180) +
                    np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[2][0]) / 180)
                )
            )

            J12_denominator = (
                3 ** (1/2) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * theta3[1][0]) / 180) * np.cos((pi * theta3[2][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) +
                3 ** (1/2) * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((pi * theta3[0][0]) / 180) * np.cos((pi * theta3[2][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) +
                3 ** (1/2) * np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.cos((pi * theta3[0][0]) / 180) * np.cos((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180) -
                np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((pi * theta3[2][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) +
                np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * theta3[2][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) +
                np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.cos((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[2][0]) / 180) -
                np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[2][0]) / 180) -
                np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.cos((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180) +
                np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180) +
                3 ** (1/2) * np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180) +
                3 ** (1/2) * np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180) +
                3 ** (1/2) * np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180)
            )
            J12 = J12_numerator/J12_denominator

            J13_numerator = (
                self.rf * np.sin((pi * theta2[2][0]) / 180) * np.sin((pi * theta3[2][0]) / 180) * (
                    2 * np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) -
                    3 ** (1/2) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) +
                    np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180)
                )
            )

            J13_denominator = (
                3 ** (1/2) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * theta3[1][0]) / 180) * np.cos((pi * theta3[2][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) +
                3 ** (1/2) * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((pi * theta3[0][0]) / 180) * np.cos((pi * theta3[2][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) +
                3 ** (1/2) * np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.cos((pi * theta3[0][0]) / 180) * np.cos((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180) -
                np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((pi * theta3[2][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) +
                np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * theta3[2][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) +
                np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.cos((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[2][0]) / 180) -
                np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[2][0]) / 180) -
                np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.cos((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180) +
                np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180) +
                3 ** (1/2) * np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180) +
                3 ** (1/2) * np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180) +
                3 ** (1/2) * np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180)
            )

            J13 = J13_numerator/J13_denominator

            J21_numerator = (
                self.rf * np.sin((pi * theta2[0][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) * (
                    np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.cos((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180) -
                    np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((pi * theta3[2][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) +
                    3 ** (1/2) * np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180) +
                    3 ** (1/2) * np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180)
                )
            )
            
            J21_denominator = (
                3 ** (1/2) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * theta3[1][0]) / 180) * np.cos((pi * theta3[2][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) +
                3 ** (1/2) * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((pi * theta3[0][0]) / 180) * np.cos((pi * theta3[2][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) +
                3 ** (1/2) * np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.cos((pi * theta3[0][0]) / 180) * np.cos((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180) -
                np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((pi * theta3[2][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) +
                np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * theta3[2][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) +
                np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.cos((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[2][0]) / 180) -
                np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[2][0]) / 180) -
                np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.cos((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180) +
                np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180) +
                3 ** (1/2) * np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180) +
                3 ** (1/2) * np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180) +
                3 ** (1/2) * np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180)
            )
            J21 = J21_numerator/J21_denominator

            J22_numerator = (
                self.rf * np.sin((pi * theta2[1][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) * (
                    np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * theta3[2][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) +
                    2 * np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.cos((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[2][0]) / 180) -
                    3 ** (1/2) * np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[2][0]) / 180)
                )
            )

            J22_denominator = (
                3 ** (1/2) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * theta3[1][0]) / 180) * np.cos((pi * theta3[2][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) +
                3 ** (1/2) * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((pi * theta3[0][0]) / 180) * np.cos((pi * theta3[2][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) +
                3 ** (1/2) * np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.cos((pi * theta3[0][0]) / 180) * np.cos((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180) -
                np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((pi * theta3[2][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) +
                np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * theta3[2][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) +
                np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.cos((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[2][0]) / 180) -
                np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[2][0]) / 180) -
                np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.cos((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180) +
                np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180) +
                3 ** (1/2) * np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180) +
                3 ** (1/2) * np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180) +
                3 ** (1/2) * np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180)
            )

            J22 = J22_numerator/J22_denominator

            J23_numerator = (
                -self.rf * np.sin((pi * theta2[2][0]) / 180) * np.sin((pi * theta3[2][0]) / 180) * (
                    np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) +
                    2 * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) +
                    3 ** (1/2) * np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180)
                )
            )

            J23_denominator = (
                3 ** (1/2) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * theta3[1][0]) / 180) * np.cos((pi * theta3[2][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) +
                3 ** (1/2) * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((pi * theta3[0][0]) / 180) * np.cos((pi * theta3[2][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) +
                3 ** (1/2) * np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.cos((pi * theta3[0][0]) / 180) * np.cos((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180) -
                np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((pi * theta3[2][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) +
                np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * theta3[2][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) +
                np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.cos((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[2][0]) / 180) -
                np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[2][0]) / 180) -
                np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.cos((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180) +
                np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180) +
                3 ** (1/2) * np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180) +
                3 ** (1/2) * np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180) +
                3 ** (1/2) * np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180)
            )

            J23 = J23_numerator/J23_denominator

            J31_numerator = (
                -self.rf * np.sin((pi * theta2[0][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) * (
                    3 ** (1/2) * np.cos((pi * theta3[1][0]) / 180) * np.cos((pi * theta3[2][0]) / 180) +
                    np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((pi * theta3[2][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) -
                    np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.cos((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180) +
                    3 ** (1/2) * np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180)
                )
            )

            J31_denominator = (
                3 ** (1/2) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * theta3[1][0]) / 180) * np.cos((pi * theta3[2][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) +
                3 ** (1/2) * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((pi * theta3[0][0]) / 180) * np.cos((pi * theta3[2][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) +
                3 ** (1/2) * np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.cos((pi * theta3[0][0]) / 180) * np.cos((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180) -
                np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((pi * theta3[2][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) +
                np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * theta3[2][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) +
                np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.cos((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[2][0]) / 180) -
                np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[2][0]) / 180) -
                np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.cos((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180) +
                np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180) +
                3 ** (1/2) * np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180) +
                3 ** (1/2) * np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180) +
                3 ** (1/2) * np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180)
            )

            J31 = J31_numerator/J31_denominator

            J32_numerator = (
                -self.rf * np.sin((pi * theta2[1][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) * (
                    3 ** (1/2) * np.cos((pi * theta3[0][0]) / 180) * np.cos((pi * theta3[2][0]) / 180) -
                    np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * theta3[2][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) +
                    np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.cos((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[2][0]) / 180) +
                    3 ** (1/2) * np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[2][0]) / 180)
                )
            )

            J32_denominator = (
                3 ** (1/2) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * theta3[1][0]) / 180) * np.cos((pi * theta3[2][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) +
                3 ** (1/2) * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((pi * theta3[0][0]) / 180) * np.cos((pi * theta3[2][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) +
                3 ** (1/2) * np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.cos((pi * theta3[0][0]) / 180) * np.cos((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180) -
                np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((pi * theta3[2][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) +
                np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * theta3[2][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) +
                np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.cos((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[2][0]) / 180) -
                np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[2][0]) / 180) -
                np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.cos((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180) +
                np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180) +
                3 ** (1/2) * np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180) +
                3 ** (1/2) * np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180) +
                3 ** (1/2) * np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180)
            )

            J32 = J32_numerator/J32_denominator

            J33_numerator = (
                -self.rf * np.sin((pi * theta2[2][0]) / 180) * np.sin((pi * theta3[2][0]) / 180) * (
                    3 ** (1/2) * np.cos((pi * theta3[0][0]) / 180) * np.cos((pi * theta3[1][0]) / 180) +
                    np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) -
                    np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) +
                    3 ** (1/2) * np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180)
                )
            )

            J33_denominator = (
                3 ** (1/2) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * theta3[1][0]) / 180) * np.cos((pi * theta3[2][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) +
                3 ** (1/2) * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((pi * theta3[0][0]) / 180) * np.cos((pi * theta3[2][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) +
                3 ** (1/2) * np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.cos((pi * theta3[0][0]) / 180) * np.cos((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180) -
                np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((pi * theta3[2][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) +
                np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * theta3[2][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) +
                np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.cos((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[2][0]) / 180) -
                np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[2][0]) / 180) -
                np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.cos((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180) +
                np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180) +
                3 ** (1/2) * np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180) +
                3 ** (1/2) * np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180) +
                3 ** (1/2) * np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180)
            )

            J33 = J33_numerator/J33_denominator

            J = np.array([[J11,J12,J13],[J21,J22,J23],[J31,J32,J33]])

            return J
    
    def MatrixD(self, q, theta2, theta3):
        pi = np.pi
        D11 = (
            -(self.rf * np.sin((pi * theta2[0][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) *
            (3 ** (1/2) * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((pi * theta3[2][0]) / 180) *
            np.sin((pi * theta3[1][0]) / 180) + 3 ** (1/2) * np.sin((pi * (q[2][0] + theta2[2][0])) / 180) *
            np.cos((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180) -
            np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((pi * (q[2][0] + theta2[2][0])) / 180) *
            np.sin((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180) +
            np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) *
            np.sin((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180)) *
            ((3 ** (1/2) * pi * np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * theta3[1][0]) / 180) *
                np.cos((pi * theta3[2][0]) / 180) * np.sin((pi * theta3[0][0]) / 180)) / 180 +
            (pi * np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * (q[1][0] + theta2[1][0])) / 180) *
                np.cos((pi * theta3[2][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180)) / 180 -
            (pi * np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * (q[2][0] + theta2[2][0])) / 180) *
                np.cos((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[2][0]) / 180)) / 180 +
            (pi * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) *
                np.cos((pi * theta3[2][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180)) / 180 -
            (pi * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.sin((pi * (q[2][0] + theta2[2][0])) / 180) *
                np.cos((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[2][0]) / 180)) / 180 +
            (3 ** (1/2) * pi * np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * (q[1][0] + theta2[1][0])) / 180) *
                np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) *
                np.sin((pi * theta3[2][0]) / 180)) / 180 -
            (3 ** (1/2) * pi * np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) *
                np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) *
                np.sin((pi * theta3[2][0]) / 180)) / 180 -
            (3 ** (1/2) * pi * np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) *
                np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) *
                np.sin((pi * theta3[2][0]) / 180)) / 180)) /
            (3 ** (1/2) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((theta3[1][0] * pi) / 180) *
            np.cos((theta3[2][0] * pi) / 180) * np.sin((theta3[0][0] * pi) / 180) +
            3 ** (1/2) * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((theta3[0][0] * pi) / 180) *
            np.cos((theta3[2][0] * pi) / 180) * np.sin((theta3[1][0] * pi) / 180) +
            3 ** (1/2) * np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.cos((theta3[0][0] * pi) / 180) *
            np.cos((theta3[1][0] * pi) / 180) * np.sin((theta3[2][0] * pi) / 180) -
            np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) *
            np.cos((theta3[2][0] * pi) / 180) * np.sin((theta3[0][0] * pi) / 180) * np.sin((theta3[1][0] * pi) / 180) +
            np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) *
            np.cos((theta3[2][0] * pi) / 180) * np.sin((theta3[0][0] * pi) / 180) * np.sin((theta3[1][0] * pi) / 180) +
            np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.sin((pi * (q[2][0] + theta2[2][0])) / 180) *
            np.cos((theta3[1][0] * pi) / 180) * np.sin((theta3[0][0] * pi) / 180) * np.sin((theta3[2][0] * pi) / 180) -
            np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) *
            np.cos((theta3[1][0] * pi) / 180) * np.sin((theta3[0][0] * pi) / 180) * np.sin((theta3[2][0] * pi) / 180) -
            np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((pi * (q[2][0] + theta2[2][0])) / 180) *
            np.cos((theta3[0][0] * pi) / 180) * np.sin((theta3[1][0] * pi) / 180) * np.sin((theta3[2][0] * pi) / 180) +
            np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) *
            np.cos((theta3[0][0] * pi) / 180) * np.sin((theta3[1][0] * pi) / 180) * np.sin((theta3[2][0] * pi) / 180) +
            3 ** (1/2) * np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * (q[1][0] + theta2[1][0])) / 180) *
            np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((theta3[0][0] * pi) / 180) * np.sin((theta3[1][0] * pi) / 180) *
            np.sin((theta3[2][0] * pi) / 180) +
            3 ** (1/2) * np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * (q[2][0] + theta2[2][0])) / 180) *
            np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((theta3[0][0] * pi) / 180) * np.sin((theta3[1][0] * pi) / 180) *
            np.sin((theta3[2][0] * pi) / 180) +
            3 ** (1/2) * np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((pi * (q[2][0] + theta2[2][0])) / 180) *
            np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.sin((theta3[0][0] * pi) / 180) * np.sin((theta3[1][0] * pi) / 180) *
            np.sin((theta3[2][0] * pi) / 180)) ** 2
        )

        D12 = (
            (self.rf * np.sin((pi * theta2[1][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) *
            (3 ** (1/2) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * theta3[2][0]) / 180) *
            np.sin((pi * theta3[0][0]) / 180) + 2 * np.cos((pi * (q[0][0] + theta2[0][0])) / 180) *
            np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * theta3[0][0]) / 180) *
            np.sin((pi * theta3[2][0]) / 180) + np.cos((pi * (q[2][0] + theta2[2][0])) / 180) *
            np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.sin((pi * theta3[0][0]) / 180) *
            np.sin((pi * theta3[2][0]) / 180)) *
            ((3 ** (1/2) * pi * np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((pi * theta3[0][0]) / 180) *
            np.cos((pi * theta3[2][0]) / 180) * np.sin((pi * theta3[1][0]) / 180)) / 180 -
            (pi * np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * (q[1][0] + theta2[1][0])) / 180) *
            np.cos((pi * theta3[2][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180)) / 180 +
            (pi * np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((pi * (q[2][0] + theta2[2][0])) / 180) *
            np.cos((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180)) / 180 -
            (pi * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) *
            np.cos((pi * theta3[2][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180)) / 180 +
            (pi * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((pi * (q[2][0] + theta2[2][0])) / 180) *
            np.cos((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180)) / 180 +
            (3 ** (1/2) * pi * np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * (q[1][0] + theta2[1][0])) / 180) *
            np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) *
            np.sin((pi * theta3[2][0]) / 180)) / 180 -
            (3 ** (1/2) * pi * np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) *
            np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) *
            np.sin((pi * theta3[2][0]) / 180)) / 180 -
            (3 ** (1/2) * pi * np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) *
            np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) *
            np.sin((pi * theta3[2][0]) / 180)) / 180)) /
            (3 ** (1/2) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((theta3[1][0] * pi) / 180) *
            np.cos((theta3[2][0] * pi) / 180) * np.sin((theta3[0][0] * pi) / 180) +
            3 ** (1/2) * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((theta3[0][0] * pi) / 180) *
            np.cos((theta3[2][0] * pi) / 180) * np.sin((theta3[1][0] * pi) / 180) +
            3 ** (1/2) * np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.cos((theta3[0][0] * pi) / 180) *
            np.cos((theta3[1][0] * pi) / 180) * np.sin((theta3[2][0] * pi) / 180) -
            np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) *
            np.cos((theta3[2][0] * pi) / 180) * np.sin((theta3[0][0] * pi) / 180) * np.sin((theta3[1][0] * pi) / 180) +
            np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) *
            np.cos((theta3[2][0] * pi) / 180) * np.sin((theta3[0][0] * pi) / 180) * np.sin((theta3[1][0] * pi) / 180) +
            np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.sin((pi * (q[2][0] + theta2[2][0])) / 180) *
            np.cos((theta3[1][0] * pi) / 180) * np.sin((theta3[0][0] * pi) / 180) * np.sin((theta3[2][0] * pi) / 180) -
            np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) *
            np.cos((theta3[1][0] * pi) / 180) * np.sin((theta3[0][0] * pi) / 180) * np.sin((theta3[2][0] * pi) / 180) -
            np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((pi * (q[2][0] + theta2[2][0])) / 180) *
            np.cos((theta3[0][0] * pi) / 180) * np.sin((theta3[1][0] * pi) / 180) * np.sin((theta3[2][0] * pi) / 180) +
            np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) *
            np.cos((theta3[0][0] * pi) / 180) * np.sin((theta3[1][0] * pi) / 180) * np.sin((theta3[2][0] * pi) / 180) +
            3 ** (1/2) * np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * (q[1][0] + theta2[1][0])) / 180) *
            np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((theta3[0][0] * pi) / 180) * np.sin((theta3[1][0] * pi) / 180) *
            np.sin((theta3[2][0] * pi) / 180) +
            3 ** (1/2) * np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * (q[2][0] + theta2[2][0])) / 180) *
            np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((theta3[0][0] * pi) / 180) * np.sin((theta3[1][0] * pi) / 180) *
            np.sin((theta3[2][0] * pi) / 180) +
            3 ** (1/2) * np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((pi * (q[2][0] + theta2[2][0])) / 180) *
            np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.sin((theta3[0][0] * pi) / 180) * np.sin((theta3[1][0] * pi) / 180) *
            np.sin((theta3[2][0] * pi) / 180)) ** 2
        )

        D13 = -(
            (self.rf * np.sin((pi * theta2[2][0]) / 180) * np.sin((pi * theta3[2][0]) / 180) *
            (2 * np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) *
            np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) -
            3 ** (1/2) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * theta3[1][0]) / 180) *
            np.sin((pi * theta3[0][0]) / 180) +
            np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) *
            np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180)) *
            ((3 ** (1/2) * pi * np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.cos((pi * theta3[0][0]) / 180) *
            np.cos((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180)) / 180 +
            (pi * np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * (q[2][0] + theta2[2][0])) / 180) *
            np.cos((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[2][0]) / 180)) / 180 -
            (pi * np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((pi * (q[2][0] + theta2[2][0])) / 180) *
            np.cos((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180)) / 180 +
            (pi * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.sin((pi * (q[2][0] + theta2[2][0])) / 180) *
            np.cos((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[2][0]) / 180)) / 180 -
            (pi * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((pi * (q[2][0] + theta2[2][0])) / 180) *
            np.cos((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180)) / 180 +
            (3 ** (1/2) * pi * np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * (q[1][0] + theta2[1][0])) / 180) *
            np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) *
            np.sin((pi * theta3[2][0]) / 180)) / 180 -
            (3 ** (1/2) * pi * np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) *
            np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) *
            np.sin((pi * theta3[2][0]) / 180)) / 180 -
            (3 ** (1/2) * pi * np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) *
            np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) *
            np.sin((pi * theta3[2][0]) / 180)) / 180)) /
            (3 ** (1/2) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((theta3[1][0] * pi) / 180) *
            np.cos((theta3[2][0] * pi) / 180) * np.sin((theta3[0][0] * pi) / 180) +
            3 ** (1/2) * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((theta3[0][0] * pi) / 180) *
            np.cos((theta3[2][0] * pi) / 180) * np.sin((theta3[1][0] * pi) / 180) +
            3 ** (1/2) * np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.cos((theta3[0][0] * pi) / 180) *
            np.cos((theta3[1][0] * pi) / 180) * np.sin((theta3[2][0] * pi) / 180) -
            np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) *
            np.cos((theta3[2][0] * pi) / 180) * np.sin((theta3[0][0] * pi) / 180) * np.sin((theta3[1][0] * pi) / 180) +
            np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) *
            np.cos((theta3[2][0] * pi) / 180) * np.sin((theta3[0][0] * pi) / 180) * np.sin((theta3[1][0] * pi) / 180) +
            np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.sin((pi * (q[2][0] + theta2[2][0])) / 180) *
            np.cos((theta3[1][0] * pi) / 180) * np.sin((theta3[0][0] * pi) / 180) * np.sin((theta3[2][0] * pi) / 180) -
            np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) *
            np.cos((theta3[1][0] * pi) / 180) * np.sin((theta3[0][0] * pi) / 180) * np.sin((theta3[2][0] * pi) / 180) -
            np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((pi * (q[2][0] + theta2[2][0])) / 180) *
            np.cos((theta3[0][0] * pi) / 180) * np.sin((theta3[1][0] * pi) / 180) * np.sin((theta3[2][0] * pi) / 180) +
            np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) *
            np.cos((theta3[0][0] * pi) / 180) * np.sin((theta3[1][0] * pi) / 180) * np.sin((theta3[2][0] * pi) / 180) +
            3 ** (1/2) * np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * (q[1][0] + theta2[1][0])) / 180) *
            np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((theta3[0][0] * pi) / 180) * np.sin((theta3[1][0] * pi) / 180) *
            np.sin((theta3[2][0] * pi) / 180) +
            3 ** (1/2) * np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * (q[2][0] + theta2[2][0])) / 180) *
            np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((theta3[0][0] * pi) / 180) * np.sin((theta3[1][0] * pi) / 180) *
            np.sin((theta3[2][0] * pi) / 180) +
            3 ** (1/2) * np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((pi * (q[2][0] + theta2[2][0])) / 180) *
            np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.sin((theta3[0][0] * pi) / 180) * np.sin((theta3[1][0] * pi) / 180) *
            np.sin((theta3[2][0] * pi) / 180)) ** 2
        )

        D21 = -(
            (self.rf * np.sin((pi * theta2[0][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) *
            (np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.cos((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180) -
            np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((pi * theta3[2][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) +
            3 ** (1/2) * np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((pi * (q[2][0] + theta2[2][0])) / 180) *
            np.sin((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180) +
            3 ** (1/2) * np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) *
            np.sin((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180)) *
            ((3 ** (1/2) * pi * np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * theta3[1][0]) / 180) *
            np.cos((pi * theta3[2][0]) / 180) * np.sin((pi * theta3[0][0]) / 180)) / 180 +
            (pi * np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * (q[1][0] + theta2[1][0])) / 180) *
            np.cos((pi * theta3[2][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180)) / 180 -
            (pi * np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * (q[2][0] + theta2[2][0])) / 180) *
            np.cos((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[2][0]) / 180)) / 180 +
            (pi * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) *
            np.cos((pi * theta3[2][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180)) / 180 -
            (pi * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.sin((pi * (q[2][0] + theta2[2][0])) / 180) *
            np.cos((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[2][0]) / 180)) / 180 +
            (3 ** (1/2) * pi * np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * (q[1][0] + theta2[1][0])) / 180) *
            np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) *
            np.sin((pi * theta3[2][0]) / 180)) / 180 -
            (3 ** (1/2) * pi * np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) *
            np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) *
            np.sin((pi * theta3[2][0]) / 180)) / 180 -
            (3 ** (1/2) * pi * np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) *
            np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) *
            np.sin((pi * theta3[2][0]) / 180)) / 180)) /
            (3 ** (1/2) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((theta3[1][0] * pi) / 180) *
            np.cos((theta3[2][0] * pi) / 180) * np.sin((theta3[0][0] * pi) / 180) +
            3 ** (1/2) * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((theta3[0][0] * pi) / 180) *
            np.cos((theta3[2][0] * pi) / 180) * np.sin((theta3[1][0] * pi) / 180) +
            3 ** (1/2) * np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.cos((theta3[0][0] * pi) / 180) *
            np.cos((theta3[1][0] * pi) / 180) * np.sin((theta3[2][0] * pi) / 180) -
            np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((theta3[2][0] * pi) / 180) *
            np.sin((theta3[0][0] * pi) / 180) * np.sin((theta3[1][0] * pi) / 180) +
            np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((theta3[2][0] * pi) / 180) *
            np.sin((theta3[0][0] * pi) / 180) * np.sin((theta3[1][0] * pi) / 180) +
            np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.cos((theta3[1][0] * pi) / 180) *
            np.sin((theta3[0][0] * pi) / 180) * np.sin((theta3[2][0] * pi) / 180) -
            np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((theta3[1][0] * pi) / 180) *
            np.sin((theta3[0][0] * pi) / 180) * np.sin((theta3[2][0] * pi) / 180) -
            np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.cos((theta3[0][0] * pi) / 180) *
            np.sin((theta3[1][0] * pi) / 180) * np.sin((theta3[2][0] * pi) / 180) +
            np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((theta3[0][0] * pi) / 180) *
            np.sin((theta3[1][0] * pi) / 180) * np.sin((theta3[2][0] * pi) / 180) +
            3 ** (1/2) * np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * (q[1][0] + theta2[1][0])) / 180) *
            np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((theta3[0][0] * pi) / 180) * np.sin((theta3[1][0] * pi) / 180) *
            np.sin((theta3[2][0] * pi) / 180) +
            3 ** (1/2) * np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * (q[2][0] + theta2[2][0])) / 180) *
            np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((theta3[0][0] * pi) / 180) * np.sin((theta3[1][0] * pi) / 180) *
            np.sin((theta3[2][0] * pi) / 180) +
            3 ** (1/2) * np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((pi * (q[2][0] + theta2[2][0])) / 180) *
            np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.sin((theta3[0][0] * pi) / 180) * np.sin((theta3[1][0] * pi) / 180) *
            np.sin((theta3[2][0] * pi) / 180)) ** 2
        )

        D22 = -(
            (self.rf * np.sin((pi * theta2[1][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) *
            (np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * theta3[2][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) +
            2 * np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.cos((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[2][0]) / 180) -
            3 ** (1/2) * np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) *
            np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[2][0]) / 180)) *
            ((3 ** (1/2) * pi * np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((pi * theta3[0][0]) / 180) *
            np.cos((pi * theta3[2][0]) / 180) * np.sin((pi * theta3[1][0]) / 180)) / 180 -
            (pi * np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * (q[1][0] + theta2[1][0])) / 180) *
            np.cos((pi * theta3[2][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180)) / 180 +
            (pi * np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((pi * (q[2][0] + theta2[2][0])) / 180) *
            np.cos((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180)) / 180 -
            (pi * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) *
            np.cos((pi * theta3[2][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180)) / 180 +
            (pi * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((pi * (q[2][0] + theta2[2][0])) / 180) *
            np.cos((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180)) / 180 +
            (3 ** (1/2) * pi * np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * (q[1][0] + theta2[1][0])) / 180) *
            np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) *
            np.sin((pi * theta3[2][0]) / 180)) / 180 -
            (3 ** (1/2) * pi * np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) *
            np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) *
            np.sin((pi * theta3[2][0]) / 180)) / 180 -
            (3 ** (1/2) * pi * np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) *
            np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) *
            np.sin((pi * theta3[2][0]) / 180)) / 180)) /
            (3 ** (1/2) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((theta3[1][0] * pi) / 180) *
            np.cos((theta3[2][0] * pi) / 180) * np.sin((theta3[0][0] * pi) / 180) +
            3 ** (1/2) * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((theta3[0][0] * pi) / 180) *
            np.cos((theta3[2][0] * pi) / 180) * np.sin((theta3[1][0] * pi) / 180) +
            3 ** (1/2) * np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.cos((theta3[0][0] * pi) / 180) *
            np.cos((theta3[1][0] * pi) / 180) * np.sin((theta3[2][0] * pi) / 180) -
            np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((theta3[2][0] * pi) / 180) *
            np.sin((theta3[0][0] * pi) / 180) * np.sin((theta3[1][0] * pi) / 180) +
            np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((theta3[2][0] * pi) / 180) *
            np.sin((theta3[0][0] * pi) / 180) * np.sin((theta3[1][0] * pi) / 180) +
            np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.cos((theta3[1][0] * pi) / 180) *
            np.sin((theta3[0][0] * pi) / 180) * np.sin((theta3[2][0] * pi) / 180) -
            np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((theta3[1][0] * pi) / 180) *
            np.sin((theta3[0][0] * pi) / 180) * np.sin((theta3[2][0] * pi) / 180) -
            np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.cos((theta3[0][0] * pi) / 180) *
            np.sin((theta3[1][0] * pi) / 180) * np.sin((theta3[2][0] * pi) / 180) +
            np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((theta3[0][0] * pi) / 180) *
            np.sin((theta3[1][0] * pi) / 180) * np.sin((theta3[2][0] * pi) / 180) +
            3 ** (1/2) * np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * (q[1][0] + theta2[1][0])) / 180) *
            np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((theta3[0][0] * pi) / 180) * np.sin((theta3[1][0] * pi) / 180) *
            np.sin((theta3[2][0] * pi) / 180) +
            3 ** (1/2) * np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * (q[2][0] + theta2[2][0])) / 180) *
            np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((theta3[0][0] * pi) / 180) * np.sin((theta3[1][0] * pi) / 180) *
            np.sin((theta3[2][0] * pi) / 180) +
            3 ** (1/2) * np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((pi * (q[2][0] + theta2[2][0])) / 180) *
            np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.sin((theta3[0][0] * pi) / 180) * np.sin((theta3[1][0] * pi) / 180) *
            np.sin((theta3[2][0] * pi) / 180)) ** 2
        )

        D23 = (
            (self.rf * np.sin((pi * theta2[2][0]) / 180) * np.sin((pi * theta3[2][0]) / 180) *
            (np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) +
            2 * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) +
            3 ** (1/2) * np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) *
            np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180)) *
            ((3 ** (1/2) * pi * np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.cos((pi * theta3[0][0]) / 180) *
            np.cos((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180)) / 180 +
            (pi * np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * (q[2][0] + theta2[2][0])) / 180) *
            np.cos((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[2][0]) / 180)) / 180 -
            (pi * np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((pi * (q[2][0] + theta2[2][0])) / 180) *
            np.cos((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180)) / 180 +
            (pi * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.sin((pi * (q[2][0] + theta2[2][0])) / 180) *
            np.cos((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[2][0]) / 180)) / 180 -
            (pi * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((pi * (q[2][0] + theta2[2][0])) / 180) *
            np.cos((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180)) / 180 +
            (3 ** (1/2) * pi * np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * (q[1][0] + theta2[1][0])) / 180) *
            np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) *
            np.sin((pi * theta3[2][0]) / 180)) / 180 -
            (3 ** (1/2) * pi * np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) *
            np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) *
            np.sin((pi * theta3[2][0]) / 180)) / 180 -
            (3 ** (1/2) * pi * np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) *
            np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) *
            np.sin((pi * theta3[2][0]) / 180)) / 180)) /
            (3 ** (1/2) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((theta3[1][0] * pi) / 180) * np.cos((theta3[2][0] * pi) / 180) *
            np.sin((theta3[0][0] * pi) / 180) + 3 ** (1/2) * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((theta3[0][0] * pi) / 180) *
            np.cos((theta3[2][0] * pi) / 180) * np.sin((theta3[1][0] * pi) / 180) + 3 ** (1/2) * np.sin((pi * (q[2][0] + theta2[2][0])) / 180) *
            np.cos((theta3[0][0] * pi) / 180) * np.cos((theta3[1][0] * pi) / 180) * np.sin((theta3[2][0] * pi) / 180) -
            np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((theta3[2][0] * pi) / 180) *
            np.sin((theta3[0][0] * pi) / 180) * np.sin((theta3[1][0] * pi) / 180) +
            np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((theta3[2][0] * pi) / 180) *
            np.sin((theta3[0][0] * pi) / 180) * np.sin((theta3[1][0] * pi) / 180) +
            np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.cos((theta3[1][0] * pi) / 180) *
            np.sin((theta3[0][0] * pi) / 180) * np.sin((theta3[2][0] * pi) / 180) -
            np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((theta3[1][0] * pi) / 180) *
            np.sin((theta3[0][0] * pi) / 180) * np.sin((theta3[2][0] * pi) / 180) -
            np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.cos((theta3[0][0] * pi) / 180) *
            np.sin((theta3[1][0] * pi) / 180) * np.sin((theta3[2][0] * pi) / 180) +
            np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((theta3[0][0] * pi) / 180) *
            np.sin((theta3[1][0] * pi) / 180) * np.sin((theta3[2][0] * pi) / 180) +
            3 ** (1/2) * np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * (q[1][0] + theta2[1][0])) / 180) *
            np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((theta3[0][0] * pi) / 180) * np.sin((theta3[1][0] * pi) / 180) *
            np.sin((theta3[2][0] * pi) / 180) +
            3 ** (1/2) * np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * (q[2][0] + theta2[2][0])) / 180) *
            np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((theta3[0][0] * pi) / 180) * np.sin((theta3[1][0] * pi) / 180) *
            np.sin((theta3[2][0] * pi) / 180) +
            3 ** (1/2) * np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((pi * (q[2][0] + theta2[2][0])) / 180) *
            np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.sin((theta3[0][0] * pi) / 180) * np.sin((theta3[1][0] * pi) / 180) *
            np.sin((theta3[2][0] * pi) / 180)) ** 2
        )

        D31 = (
            (self.rf * np.sin((pi * theta2[0][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) *
            (3 ** (1/2) * np.cos((pi * theta3[1][0]) / 180) * np.cos((pi * theta3[2][0]) / 180) +
            np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((pi * theta3[2][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) -
            np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.cos((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180) +
            3 ** (1/2) * np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((pi * (q[2][0] + theta2[2][0])) / 180) *
            np.sin((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180)) *
            ((3 ** (1/2) * pi * np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * theta3[1][0]) / 180) *
            np.cos((pi * theta3[2][0]) / 180) * np.sin((pi * theta3[0][0]) / 180)) / 180 +
            (pi * np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * (q[1][0] + theta2[1][0])) / 180) *
            np.cos((pi * theta3[2][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180)) / 180 -
            (pi * np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * (q[2][0] + theta2[2][0])) / 180) *
            np.cos((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[2][0]) / 180)) / 180 +
            (pi * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) *
            np.cos((pi * theta3[2][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180)) / 180 -
            (pi * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.sin((pi * (q[2][0] + theta2[2][0])) / 180) *
            np.cos((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[2][0]) / 180)) / 180 +
            (3 ** (1/2) * pi * np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * (q[1][0] + theta2[1][0])) / 180) *
            np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) *
            np.sin((pi * theta3[2][0]) / 180)) / 180 -
            (3 ** (1/2) * pi * np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) *
            np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) *
            np.sin((pi * theta3[2][0]) / 180)) / 180 -
            (3 ** (1/2) * pi * np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) *
            np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) *
            np.sin((pi * theta3[2][0]) / 180)) / 180)) /
            (3 ** (1/2) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((theta3[1][0] * pi) / 180) *
            np.cos((theta3[2][0] * pi) / 180) * np.sin((theta3[0][0] * pi) / 180) +
            3 ** (1/2) * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((theta3[0][0] * pi) / 180) *
            np.cos((theta3[2][0] * pi) / 180) * np.sin((theta3[1][0] * pi) / 180) +
            3 ** (1/2) * np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.cos((theta3[0][0] * pi) / 180) *
            np.cos((theta3[1][0] * pi) / 180) * np.sin((theta3[2][0] * pi) / 180) -
            np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((theta3[2][0] * pi) / 180) *
            np.sin((theta3[0][0] * pi) / 180) * np.sin((theta3[1][0] * pi) / 180) +
            np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((theta3[2][0] * pi) / 180) *
            np.sin((theta3[0][0] * pi) / 180) * np.sin((theta3[1][0] * pi) / 180) +
            np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.cos((theta3[1][0] * pi) / 180) *
            np.sin((theta3[0][0] * pi) / 180) * np.sin((theta3[2][0] * pi) / 180) -
            np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((theta3[1][0] * pi) / 180) *
            np.sin((theta3[0][0] * pi) / 180) * np.sin((theta3[2][0] * pi) / 180) -
            np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.cos((theta3[0][0] * pi) / 180) *
            np.sin((theta3[1][0] * pi) / 180) * np.sin((theta3[2][0] * pi) / 180) +
            np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((theta3[0][0] * pi) / 180) *
            np.sin((theta3[1][0] * pi) / 180) * np.sin((theta3[2][0] * pi) / 180) +
            3 ** (1/2) * np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * (q[1][0] + theta2[1][0])) / 180) *
            np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((theta3[0][0] * pi) / 180) * np.sin((theta3[1][0] * pi) / 180) *
            np.sin((theta3[2][0] * pi) / 180) +
            3 ** (1/2) * np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * (q[2][0] + theta2[2][0])) / 180) *
            np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((theta3[0][0] * pi) / 180) * np.sin((theta3[1][0] * pi) / 180) *
            np.sin((theta3[2][0] * pi) / 180) +
            3 ** (1/2) * np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((pi * (q[2][0] + theta2[2][0])) / 180) *
            np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.sin((theta3[0][0] * pi) / 180) * np.sin((theta3[1][0] * pi) / 180) *
            np.sin((theta3[2][0] * pi) / 180)) ** 2
        )

        D32 = (
            (self.rf * np.sin((pi * theta2[1][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) *
            (3 ** (1/2) * np.cos((pi * theta3[0][0]) / 180) * np.cos((pi * theta3[2][0]) / 180) -
            np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * theta3[2][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) +
            np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.cos((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[2][0]) / 180) +
            3 ** (1/2) * np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * (q[2][0] + theta2[2][0])) / 180) *
            np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[2][0]) / 180)) *
            ((3 ** (1/2) * pi * np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((pi * theta3[0][0]) / 180) *
            np.cos((pi * theta3[2][0]) / 180) * np.sin((pi * theta3[1][0]) / 180)) / 180 -
            (pi * np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * (q[1][0] + theta2[1][0])) / 180) *
            np.cos((pi * theta3[2][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180)) / 180 +
            (pi * np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((pi * (q[2][0] + theta2[2][0])) / 180) *
            np.cos((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180)) / 180 -
            (pi * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) *
            np.cos((pi * theta3[2][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180)) / 180 +
            (pi * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((pi * (q[2][0] + theta2[2][0])) / 180) *
            np.cos((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180)) / 180 +
            (3 ** (1/2) * pi * np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * (q[1][0] + theta2[1][0])) / 180) *
            np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) *
            np.sin((pi * theta3[2][0]) / 180)) / 180 -
            (3 ** (1/2) * pi * np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) *
            np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) *
            np.sin((pi * theta3[2][0]) / 180)) / 180 -
            (3 ** (1/2) * pi * np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) *
            np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) *
            np.sin((pi * theta3[2][0]) / 180)) / 180)) /
            (3 ** (1/2) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((theta3[1][0] * pi) / 180) *
            np.cos((theta3[2][0] * pi) / 180) * np.sin((theta3[0][0] * pi) / 180) +
            3 ** (1/2) * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((theta3[0][0] * pi) / 180) *
            np.cos((theta3[2][0] * pi) / 180) * np.sin((theta3[1][0] * pi) / 180) +
            3 ** (1/2) * np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.cos((theta3[0][0] * pi) / 180) *
            np.cos((theta3[1][0] * pi) / 180) * np.sin((theta3[2][0] * pi) / 180) -
            np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((theta3[2][0] * pi) / 180) *
            np.sin((theta3[0][0] * pi) / 180) * np.sin((theta3[1][0] * pi) / 180) +
            np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((theta3[2][0] * pi) / 180) *
            np.sin((theta3[0][0] * pi) / 180) * np.sin((theta3[1][0] * pi) / 180) +
            np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.cos((theta3[1][0] * pi) / 180) *
            np.sin((theta3[0][0] * pi) / 180) * np.sin((theta3[2][0] * pi) / 180) -
            np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((theta3[1][0] * pi) / 180) *
            np.sin((theta3[0][0] * pi) / 180) * np.sin((theta3[2][0] * pi) / 180) -
            np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.cos((theta3[0][0] * pi) / 180) *
            np.sin((theta3[1][0] * pi) / 180) * np.sin((theta3[2][0] * pi) / 180) +
            np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((theta3[0][0] * pi) / 180) *
            np.sin((theta3[1][0] * pi) / 180) * np.sin((theta3[2][0] * pi) / 180) +
            3 ** (1/2) * np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * (q[1][0] + theta2[1][0])) / 180) *
            np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((theta3[0][0] * pi) / 180) * np.sin((theta3[1][0] * pi) / 180) *
            np.sin((theta3[2][0] * pi) / 180) +
            3 ** (1/2) * np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * (q[2][0] + theta2[2][0])) / 180) *
            np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((theta3[0][0] * pi) / 180) * np.sin((theta3[1][0] * pi) / 180) *
            np.sin((theta3[2][0] * pi) / 180) +
            3 ** (1/2) * np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((pi * (q[2][0] + theta2[2][0])) / 180) *
            np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.sin((theta3[0][0] * pi) / 180) * np.sin((theta3[1][0] * pi) / 180) *
            np.sin((theta3[2][0] * pi) / 180)) ** 2
        )

        D33 = (
            (self.rf * np.sin((pi * theta2[2][0]) / 180) * np.sin((pi * theta3[2][0]) / 180) *
            (3 ** (1/2) * np.cos((pi * theta3[0][0]) / 180) * np.cos((pi * theta3[1][0]) / 180) +
            np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) -
            np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) +
            3 ** (1/2) * np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * (q[1][0] + theta2[1][0])) / 180) *
            np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180)) *
            ((3 ** (1/2) * pi * np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.cos((pi * theta3[0][0]) / 180) *
            np.cos((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180)) / 180 +
            (pi * np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * (q[2][0] + theta2[2][0])) / 180) *
            np.cos((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[2][0]) / 180)) / 180 -
            (pi * np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((pi * (q[2][0] + theta2[2][0])) / 180) *
            np.cos((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180)) / 180 +
            (pi * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.sin((pi * (q[2][0] + theta2[2][0])) / 180) *
            np.cos((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[2][0]) / 180)) / 180 -
            (pi * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((pi * (q[2][0] + theta2[2][0])) / 180) *
            np.cos((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) * np.sin((pi * theta3[2][0]) / 180)) / 180 +
            (3 ** (1/2) * pi * np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * (q[1][0] + theta2[1][0])) / 180) *
            np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) *
            np.sin((pi * theta3[2][0]) / 180)) / 180 -
            (3 ** (1/2) * pi * np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) *
            np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) *
            np.sin((pi * theta3[2][0]) / 180)) / 180 -
            (3 ** (1/2) * pi * np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) *
            np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * theta3[0][0]) / 180) * np.sin((pi * theta3[1][0]) / 180) *
            np.sin((pi * theta3[2][0]) / 180)) / 180)) /
            (3 ** (1/2) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((theta3[1][0] * pi) / 180) *
            np.cos((theta3[2][0] * pi) / 180) * np.sin((theta3[0][0] * pi) / 180) +
            3 ** (1/2) * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((theta3[0][0] * pi) / 180) *
            np.cos((theta3[2][0] * pi) / 180) * np.sin((theta3[1][0] * pi) / 180) +
            3 ** (1/2) * np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.cos((theta3[0][0] * pi) / 180) *
            np.cos((theta3[1][0] * pi) / 180) * np.sin((theta3[2][0] * pi) / 180) -
            np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((theta3[2][0] * pi) / 180) *
            np.sin((theta3[0][0] * pi) / 180) * np.sin((theta3[1][0] * pi) / 180) +
            np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((theta3[2][0] * pi) / 180) *
            np.sin((theta3[0][0] * pi) / 180) * np.sin((theta3[1][0] * pi) / 180) +
            np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.cos((theta3[1][0] * pi) / 180) *
            np.sin((theta3[0][0] * pi) / 180) * np.sin((theta3[2][0] * pi) / 180) -
            np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((theta3[1][0] * pi) / 180) *
            np.sin((theta3[0][0] * pi) / 180) * np.sin((theta3[2][0] * pi) / 180) -
            np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.cos((theta3[0][0] * pi) / 180) *
            np.sin((theta3[1][0] * pi) / 180) * np.sin((theta3[2][0] * pi) / 180) +
            np.cos((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((theta3[0][0] * pi) / 180) *
            np.sin((theta3[1][0] * pi) / 180) * np.sin((theta3[2][0] * pi) / 180) +
            3 ** (1/2) * np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * (q[1][0] + theta2[1][0])) / 180) *
            np.sin((pi * (q[2][0] + theta2[2][0])) / 180) * np.sin((theta3[0][0] * pi) / 180) * np.sin((theta3[1][0] * pi) / 180) *
            np.sin((theta3[2][0] * pi) / 180) +
            3 ** (1/2) * np.cos((pi * (q[0][0] + theta2[0][0])) / 180) * np.cos((pi * (q[2][0] + theta2[2][0])) / 180) *
            np.sin((pi * (q[1][0] + theta2[1][0])) / 180) * np.sin((theta3[0][0] * pi) / 180) * np.sin((theta3[1][0] * pi) / 180) *
            np.sin((theta3[2][0] * pi) / 180) +
            3 ** (1/2) * np.cos((pi * (q[1][0] + theta2[1][0])) / 180) * np.cos((pi * (q[2][0] + theta2[2][0])) / 180) *
            np.sin((pi * (q[0][0] + theta2[0][0])) / 180) * np.sin((theta3[0][0] * pi) / 180) * np.sin((theta3[1][0] * pi) / 180) *
            np.sin((theta3[2][0] * pi) / 180)) ** 2
        )

        D = np.array([[D11,D12,D13],[D21,D22,D23],[D31,D32,D33]])

        return D

    def MatrixE(self, q, theta2, theta3):
        pi = np.pi

        E11 = (self.rf*np.sin((pi*theta2[0][0])/180)*np.sin((pi*theta3[0][0])/180)*((np.sqrt(3)*pi*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[1][0])/180))/180 + (pi*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180 + (pi*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180))/(np.sqrt(3)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180) + np.sqrt(3)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[1][0])/180) + np.sqrt(3)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) - np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180) + np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180) + np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[2][0])/180) - np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[2][0])/180) - np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) + np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) + np.sqrt(3)*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) + np.sqrt(3)*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) + np.sqrt(3)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180)) - (self.rf*np.sin((pi*theta2[1][0])/180)*np.sin((pi*theta3[1][0])/180)*((np.sqrt(3)*pi*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180))/180 + (pi*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[2][0])/180))/180 - (pi*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[2][0])/180))/90))/(np.sqrt(3)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180) + np.sqrt(3)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[1][0])/180) + np.sqrt(3)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) - np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180) + np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180) + np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[2][0])/180) - np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[2][0])/180) - np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) + np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) + np.sqrt(3)*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) + np.sqrt(3)*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) + np.sqrt(3)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180)) + (self.rf*np.sin((pi*theta2[1][0])/180)*np.sin((pi*theta3[1][0])/180)*(np.sqrt(3)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180) + 2*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[2][0])/180) + np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[2][0])/180))*((np.sqrt(3)*pi*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180))/180 + (pi*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180))/180 - (pi*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[2][0])/180))/180 + (pi*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180))/180 - (pi*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[2][0])/180))/180 + (np.sqrt(3)*pi*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180 - (np.sqrt(3)*pi*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180 - (np.sqrt(3)*pi*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180))/(np.sqrt(3)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((theta3[1][0]*pi)/180)*np.cos((theta3[2][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180) + np.sqrt(3)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((theta3[0][0]*pi)/180)*np.cos((theta3[2][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180) + np.sqrt(3)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((theta3[0][0]*pi)/180)*np.cos((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) - np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((theta3[2][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180) + np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((theta3[2][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180) + np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((theta3[1][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) - np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((theta3[1][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) - np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) + np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) + np.sqrt(3)*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) + np.sqrt(3)*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) + np.sqrt(3)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180))**2 - (self.rf*np.sin((pi*theta2[0][0])/180)*np.sin((pi*theta3[0][0])/180)*(np.sqrt(3)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[1][0])/180) + np.sqrt(3)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) - np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) + np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))*((np.sqrt(3)*pi*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[1][0])/180))/180 - (pi*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180))/180 + (pi*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180 - (pi*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180))/180 + (pi*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180 + (np.sqrt(3)*pi*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180 - (np.sqrt(3)*pi*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180 - (np.sqrt(3)*pi*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180))/(np.sqrt(3)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((theta3[1][0]*pi)/180)*np.cos((theta3[2][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180) + np.sqrt(3)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((theta3[0][0]*pi)/180)*np.cos((theta3[2][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180) + np.sqrt(3)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((theta3[0][0]*pi)/180)*np.cos((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) - np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((theta3[2][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180) + np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((theta3[2][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180) + np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((theta3[1][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) - np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((theta3[1][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) - np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) + np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) + np.sqrt(3)*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) + np.sqrt(3)*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) + np.sqrt(3)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180))**2

        E12 = - (self.rf*np.sin((pi*theta2[2][0])/180)*np.sin((pi*theta3[2][0])/180)*((np.sqrt(3)*pi*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[0][0])/180))/180 - (pi*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180))/180 + (pi*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180))/90))/(np.sqrt(3)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180) + np.sqrt(3)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[1][0])/180) + np.sqrt(3)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) - np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180) + np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180) + np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[2][0])/180) - np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[2][0])/180) - np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) + np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) + np.sqrt(3)*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) + np.sqrt(3)*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) + np.sqrt(3)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180)) - (self.rf*np.sin((pi*theta2[0][0])/180)*np.sin((pi*theta3[0][0])/180)*((pi*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180 - (np.sqrt(3)*pi*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180 + (pi*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180))/(np.sqrt(3)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180) + np.sqrt(3)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[1][0])/180) + np.sqrt(3)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) - np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180) + np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180) + np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[2][0])/180) - np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[2][0])/180) - np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) + np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) + np.sqrt(3)*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) + np.sqrt(3)*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) + np.sqrt(3)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180)) - (self.rf*np.sin((pi*theta2[2][0])/180)*np.sin((pi*theta3[2][0])/180)*(2*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180) - np.sqrt(3)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[0][0])/180) + np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180))*((np.sqrt(3)*pi*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180))/180 + (pi*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180))/180 - (pi*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[2][0])/180))/180 + (pi*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180))/180 - (pi*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[2][0])/180))/180 + (np.sqrt(3)*pi*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180 - (np.sqrt(3)*pi*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180 - (np.sqrt(3)*pi*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180))/(np.sqrt(3)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((theta3[1][0]*pi)/180)*np.cos((theta3[2][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180) + np.sqrt(3)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((theta3[0][0]*pi)/180)*np.cos((theta3[2][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180) + np.sqrt(3)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((theta3[0][0]*pi)/180)*np.cos((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) - np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((theta3[2][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180) + np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((theta3[2][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180) + np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((theta3[1][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) - np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((theta3[1][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) - np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) + np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) + np.sqrt(3)*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) + np.sqrt(3)*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) + np.sqrt(3)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180))**2 - (self.rf*np.sin((pi*theta2[0][0])/180)*np.sin((pi*theta3[0][0])/180)*(np.sqrt(3)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[1][0])/180) + np.sqrt(3)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) - np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) + np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))*((np.sqrt(3)*pi*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180 + (pi*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[2][0])/180))/180 - (pi*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180 + (pi*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[2][0])/180))/180 - (pi*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180 + (np.sqrt(3)*pi*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180 - (np.sqrt(3)*pi*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180 - (np.sqrt(3)*pi*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180))/(np.sqrt(3)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((theta3[1][0]*pi)/180)*np.cos((theta3[2][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180) + np.sqrt(3)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((theta3[0][0]*pi)/180)*np.cos((theta3[2][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180) + np.sqrt(3)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((theta3[0][0]*pi)/180)*np.cos((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) - np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((theta3[2][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180) + np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((theta3[2][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180) + np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((theta3[1][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) - np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((theta3[1][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) - np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) + np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) + np.sqrt(3)*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) + np.sqrt(3)*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) + np.sqrt(3)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180))**2

        E13 = (self.rf*np.sin((pi*theta2[2][0])/180)*np.sin((pi*theta3[2][0])/180)*((pi*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180))/90 - (pi*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180))/180))/(np.sqrt(3)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180) + np.sqrt(3)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[1][0])/180) + np.sqrt(3)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) - np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180) + np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180) + np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[2][0])/180) - np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[2][0])/180) - np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) + np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) + np.sqrt(3)*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) + np.sqrt(3)*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) + np.sqrt(3)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180)) - (self.rf*np.sin((pi*theta2[1][0])/180)*np.sin((pi*theta3[1][0])/180)*((pi*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[2][0])/180))/90 - (pi*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[2][0])/180))/180))/(np.sqrt(3)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180) + np.sqrt(3)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[1][0])/180) + np.sqrt(3)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) - np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180) + np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180) + np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[2][0])/180) - np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[2][0])/180) - np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) + np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) + np.sqrt(3)*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) + np.sqrt(3)*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) + np.sqrt(3)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180)) - (self.rf*np.sin((pi*theta2[2][0])/180)*np.sin((pi*theta3[2][0])/180)*(2*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180) - np.sqrt(3)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[0][0])/180) + np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180))*((np.sqrt(3)*pi*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[1][0])/180))/180 - (pi*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180))/180 + (pi*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180 - (pi*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180))/180 + (pi*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180 + (np.sqrt(3)*pi*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180 - (np.sqrt(3)*pi*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180 - (np.sqrt(3)*pi*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180))/(np.sqrt(3)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((theta3[1][0]*pi)/180)*np.cos((theta3[2][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180) + np.sqrt(3)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((theta3[0][0]*pi)/180)*np.cos((theta3[2][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180) + np.sqrt(3)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((theta3[0][0]*pi)/180)*np.cos((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) - np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((theta3[2][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180) + np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((theta3[2][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180) + np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((theta3[1][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) - np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((theta3[1][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) - np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) + np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) + np.sqrt(3)*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) + np.sqrt(3)*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) + np.sqrt(3)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180))**2 + (self.rf*np.sin((pi*theta2[1][0])/180)*np.sin((pi*theta3[1][0])/180)*(np.sqrt(3)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180) + 2*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[2][0])/180) + np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[2][0])/180))*((np.sqrt(3)*pi*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180 + (pi*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[2][0])/180))/180 - (pi*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180 + (pi*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[2][0])/180))/180 - (pi*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180 + (np.sqrt(3)*pi*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180 - (np.sqrt(3)*pi*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180 - (np.sqrt(3)*pi*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180))/(np.sqrt(3)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((theta3[1][0]*pi)/180)*np.cos((theta3[2][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180) + np.sqrt(3)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((theta3[0][0]*pi)/180)*np.cos((theta3[2][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180) + np.sqrt(3)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((theta3[0][0]*pi)/180)*np.cos((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) - np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((theta3[2][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180) + np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((theta3[2][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180) + np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((theta3[1][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) - np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((theta3[1][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) - np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) + np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) + np.sqrt(3)*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) + np.sqrt(3)*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) + np.sqrt(3)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180))**2

        E21 = (self.rf*np.sin((pi*theta2[1][0])/180)*np.sin((pi*theta3[1][0])/180)*((pi*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180))/180 - (np.sqrt(3)*pi*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[2][0])/180))/180))/(np.sqrt(3)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180) + np.sqrt(3)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[1][0])/180) + np.sqrt(3)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) - np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180) + np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180) + np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[2][0])/180) - np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[2][0])/180) - np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) + np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) + np.sqrt(3)*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) + np.sqrt(3)*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) + np.sqrt(3)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180)) - (self.rf*np.sin((pi*theta2[0][0])/180)*np.sin((pi*theta3[0][0])/180)*((pi*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[1][0])/180))/180 + (np.sqrt(3)*pi*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180 - (np.sqrt(3)*pi*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180))/(np.sqrt(3)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180) + np.sqrt(3)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[1][0])/180) + np.sqrt(3)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) - np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180) + np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180) + np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[2][0])/180) - np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[2][0])/180) - np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) + np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) + np.sqrt(3)*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) + np.sqrt(3)*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) + np.sqrt(3)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180)) - (self.rf*np.sin((pi*theta2[1][0])/180)*np.sin((pi*theta3[1][0])/180)*(np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180) + 2*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.sin((pi*theta3[2][0])/180) - np.sqrt(3)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[2][0])/180))*((np.sqrt(3)*pi*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180))/180 + (pi*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180))/180 - (pi*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[2][0])/180))/180 + (pi*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180))/180 - (pi*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[2][0])/180))/180 + (np.sqrt(3)*pi*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180 - (np.sqrt(3)*pi*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180 - (np.sqrt(3)*pi*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180))/(np.sqrt(3)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((theta3[1][0]*pi)/180)*np.cos((theta3[2][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180) + np.sqrt(3)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((theta3[0][0]*pi)/180)*np.cos((theta3[2][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180) + np.sqrt(3)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((theta3[0][0]*pi)/180)*np.cos((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) - np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((theta3[2][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180) + np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((theta3[2][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180) + np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((theta3[1][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) - np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((theta3[1][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) - np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) + np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) + np.sqrt(3)*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) + np.sqrt(3)*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) + np.sqrt(3)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180))**2 - (self.rf*np.sin((pi*theta2[0][0])/180)*np.sin((pi*theta3[0][0])/180)*(np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) - np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[1][0])/180) + np.sqrt(3)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) + np.sqrt(3)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))*((np.sqrt(3)*pi*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[1][0])/180))/180 - (pi*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180))/180 + (pi*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180 - (pi*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180))/180 + (pi*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180 + (np.sqrt(3)*pi*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180 - (np.sqrt(3)*pi*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180 - (np.sqrt(3)*pi*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180))/(np.sqrt(3)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((theta3[1][0]*pi)/180)*np.cos((theta3[2][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180) + np.sqrt(3)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((theta3[0][0]*pi)/180)*np.cos((theta3[2][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180) + np.sqrt(3)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((theta3[0][0]*pi)/180)*np.cos((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) - np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((theta3[2][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180) + np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((theta3[2][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180) + np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((theta3[1][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) - np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((theta3[1][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) - np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) + np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) + np.sqrt(3)*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) + np.sqrt(3)*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) + np.sqrt(3)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180))**2

        E22 = (self.rf*np.sin((pi*theta2[0][0])/180)*np.sin((pi*theta3[0][0])/180)*((pi*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180 - (np.sqrt(3)*pi*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180 + (np.sqrt(3)*pi*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180))/(np.sqrt(3)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180) + np.sqrt(3)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[1][0])/180) + np.sqrt(3)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) - np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180) + np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180) + np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[2][0])/180) - np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[2][0])/180) - np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) + np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) + np.sqrt(3)*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) + np.sqrt(3)*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) + np.sqrt(3)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180)) - (self.rf*np.sin((pi*theta2[2][0])/180)*np.sin((pi*theta3[2][0])/180)*((pi*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[0][0])/180))/180 + (np.sqrt(3)*pi*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180))/180))/(np.sqrt(3)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180) + np.sqrt(3)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[1][0])/180) + np.sqrt(3)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) - np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180) + np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180) + np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[2][0])/180) - np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[2][0])/180) - np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) + np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) + np.sqrt(3)*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) + np.sqrt(3)*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) + np.sqrt(3)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180)) + (self.rf*np.sin((pi*theta2[2][0])/180)*np.sin((pi*theta3[2][0])/180)*(np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[0][0])/180) + 2*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180) + np.sqrt(3)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180))*((np.sqrt(3)*pi*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180))/180 + (pi*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180))/180 - (pi*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[2][0])/180))/180 + (pi*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180))/180 - (pi*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[2][0])/180))/180 + (np.sqrt(3)*pi*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180 - (np.sqrt(3)*pi*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180 - (np.sqrt(3)*pi*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180))/(np.sqrt(3)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((theta3[1][0]*pi)/180)*np.cos((theta3[2][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180) + np.sqrt(3)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((theta3[0][0]*pi)/180)*np.cos((theta3[2][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180) + np.sqrt(3)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((theta3[0][0]*pi)/180)*np.cos((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) - np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((theta3[2][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180) + np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((theta3[2][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180) + np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((theta3[1][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) - np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((theta3[1][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) - np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) + np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) + np.sqrt(3)*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) + np.sqrt(3)*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) + np.sqrt(3)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180))**2 - (self.rf*np.sin((pi*theta2[0][0])/180)*np.sin((pi*theta3[0][0])/180)*(np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) - np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[1][0])/180) + np.sqrt(3)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) + np.sqrt(3)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))*((np.sqrt(3)*pi*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180 + (pi*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[2][0])/180))/180 - (pi*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180 + (pi*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[2][0])/180))/180 - (pi*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180 + (np.sqrt(3)*pi*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180 - (np.sqrt(3)*pi*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180 - (np.sqrt(3)*pi*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180))/(np.sqrt(3)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((theta3[1][0]*pi)/180)*np.cos((theta3[2][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180) + np.sqrt(3)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((theta3[0][0]*pi)/180)*np.cos((theta3[2][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180) + np.sqrt(3)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((theta3[0][0]*pi)/180)*np.cos((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) - np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((theta3[2][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180) + np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((theta3[2][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180) + np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((theta3[1][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) - np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((theta3[1][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) - np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) + np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) + np.sqrt(3)*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) + np.sqrt(3)*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) + np.sqrt(3)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180))**2

        E23 = (self.rf*np.sin((pi*theta2[1][0])/180)*np.sin((pi*theta3[1][0])/180)*((pi*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.sin((pi*theta3[2][0])/180))/90 + (np.sqrt(3)*pi*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[2][0])/180))/180))/(np.sqrt(3)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180) + np.sqrt(3)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[1][0])/180) + np.sqrt(3)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) - np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180) + np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180) + np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[2][0])/180) - np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[2][0])/180) - np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) + np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) + np.sqrt(3)*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) + np.sqrt(3)*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) + np.sqrt(3)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180)) - (self.rf*np.sin((pi*theta2[2][0])/180)*np.sin((pi*theta3[2][0])/180)*((pi*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180))/90 - (np.sqrt(3)*pi*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180))/180))/(np.sqrt(3)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180) + np.sqrt(3)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[1][0])/180) + np.sqrt(3)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) - np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180) + np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180) + np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[2][0])/180) - np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[2][0])/180) - np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) + np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) + np.sqrt(3)*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) + np.sqrt(3)*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) + np.sqrt(3)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180)) + (self.rf*np.sin((pi*theta2[2][0])/180)*np.sin((pi*theta3[2][0])/180)*(np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[0][0])/180) + 2*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180) + np.sqrt(3)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180))*((np.sqrt(3)*pi*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[1][0])/180))/180 - (pi*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180))/180 + (pi*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180 - (pi*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180))/180 + (pi*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180 + (np.sqrt(3)*pi*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180 - (np.sqrt(3)*pi*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180 - (np.sqrt(3)*pi*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180))/(np.sqrt(3)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((theta3[1][0]*pi)/180)*np.cos((theta3[2][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180) + np.sqrt(3)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((theta3[0][0]*pi)/180)*np.cos((theta3[2][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180) + np.sqrt(3)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((theta3[0][0]*pi)/180)*np.cos((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) - np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((theta3[2][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180) + np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((theta3[2][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180) + np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((theta3[1][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) - np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((theta3[1][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) - np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) + np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) + np.sqrt(3)*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) + np.sqrt(3)*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) + np.sqrt(3)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180))**2 - (self.rf*np.sin((pi*theta2[1][0])/180)*np.sin((pi*theta3[1][0])/180)*(np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180) + 2*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.sin((pi*theta3[2][0])/180) - np.sqrt(3)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[2][0])/180))*((np.sqrt(3)*pi*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180 + (pi*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[2][0])/180))/180 - (pi*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180 + (pi*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[2][0])/180))/180 - (pi*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180 + (np.sqrt(3)*pi*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180 - (np.sqrt(3)*pi*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180 - (np.sqrt(3)*pi*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180))/(np.sqrt(3)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((theta3[1][0]*pi)/180)*np.cos((theta3[2][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180) + np.sqrt(3)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((theta3[0][0]*pi)/180)*np.cos((theta3[2][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180) + np.sqrt(3)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((theta3[0][0]*pi)/180)*np.cos((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) - np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((theta3[2][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180) + np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((theta3[2][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180) + np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((theta3[1][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) - np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((theta3[1][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) - np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) + np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) + np.sqrt(3)*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) + np.sqrt(3)*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) + np.sqrt(3)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180))**2

        E31 = (self.rf*np.sin((pi*theta2[0][0])/180)*np.sin((pi*theta3[0][0])/180)*((pi*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[1][0])/180))/180 + (np.sqrt(3)*pi*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180))/(np.sqrt(3)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180) + np.sqrt(3)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[1][0])/180) + np.sqrt(3)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) - np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180) + np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180) + np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[2][0])/180) - np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[2][0])/180) - np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) + np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) + np.sqrt(3)*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) + np.sqrt(3)*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) + np.sqrt(3)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180)) - (self.rf*np.sin((pi*theta2[1][0])/180)*np.sin((pi*theta3[1][0])/180)*((pi*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180))/180 - (np.sqrt(3)*pi*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[2][0])/180))/180))/(np.sqrt(3)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180) + np.sqrt(3)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[1][0])/180) + np.sqrt(3)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) - np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180) + np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180) + np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[2][0])/180) - np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[2][0])/180) - np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) + np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) + np.sqrt(3)*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) + np.sqrt(3)*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) + np.sqrt(3)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180)) + (self.rf*np.sin((pi*theta2[1][0])/180)*np.sin((pi*theta3[1][0])/180)*(np.sqrt(3)*np.cos((pi*theta3[0][0])/180)*np.cos((pi*theta3[2][0])/180) - np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180) + np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.sin((pi*theta3[2][0])/180) + np.sqrt(3)*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[2][0])/180))*((np.sqrt(3)*pi*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180))/180 + (pi*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180))/180 - (pi*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[2][0])/180))/180 + (pi*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180))/180 - (pi*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[2][0])/180))/180 + (np.sqrt(3)*pi*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180 - (np.sqrt(3)*pi*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180 - (np.sqrt(3)*pi*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180))/(np.sqrt(3)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((theta3[1][0]*pi)/180)*np.cos((theta3[2][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180) + np.sqrt(3)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((theta3[0][0]*pi)/180)*np.cos((theta3[2][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180) + np.sqrt(3)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((theta3[0][0]*pi)/180)*np.cos((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) - np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((theta3[2][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180) + np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((theta3[2][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180) + np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((theta3[1][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) - np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((theta3[1][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) - np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) + np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) + np.sqrt(3)*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) + np.sqrt(3)*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) + np.sqrt(3)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180))**2 + (self.rf*np.sin((pi*theta2[0][0])/180)*np.sin((pi*theta3[0][0])/180)*(np.sqrt(3)*np.cos((pi*theta3[1][0])/180)*np.cos((pi*theta3[2][0])/180) + np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[1][0])/180) - np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) + np.sqrt(3)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))*((np.sqrt(3)*pi*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[1][0])/180))/180 - (pi*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180))/180 + (pi*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180 - (pi*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180))/180 + (pi*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180 + (np.sqrt(3)*pi*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180 - (np.sqrt(3)*pi*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180 - (np.sqrt(3)*pi*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180))/(np.sqrt(3)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((theta3[1][0]*pi)/180)*np.cos((theta3[2][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180) + np.sqrt(3)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((theta3[0][0]*pi)/180)*np.cos((theta3[2][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180) + np.sqrt(3)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((theta3[0][0]*pi)/180)*np.cos((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) - np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((theta3[2][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180) + np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((theta3[2][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180) + np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((theta3[1][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) - np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((theta3[1][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) - np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) + np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) + np.sqrt(3)*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) + np.sqrt(3)*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) + np.sqrt(3)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180))**2

        E32 = (self.rf*np.sin((pi*theta2[2][0])/180)*np.sin((pi*theta3[2][0])/180)*((pi*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[0][0])/180))/180 + (np.sqrt(3)*pi*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180))/180))/(np.sqrt(3)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180) + np.sqrt(3)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[1][0])/180) + np.sqrt(3)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) - np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180) + np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180) + np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[2][0])/180) - np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[2][0])/180) - np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) + np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) + np.sqrt(3)*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) + np.sqrt(3)*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) + np.sqrt(3)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180)) - (self.rf*np.sin((pi*theta2[0][0])/180)*np.sin((pi*theta3[0][0])/180)*((pi*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180 - (np.sqrt(3)*pi*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180))/(np.sqrt(3)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180) + np.sqrt(3)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[1][0])/180) + np.sqrt(3)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) - np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180) + np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180) + np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[2][0])/180) - np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[2][0])/180) - np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) + np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) + np.sqrt(3)*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) + np.sqrt(3)*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) + np.sqrt(3)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180)) + (self.rf*np.sin((pi*theta2[2][0])/180)*np.sin((pi*theta3[2][0])/180)*(np.sqrt(3)*np.cos((pi*theta3[0][0])/180)*np.cos((pi*theta3[1][0])/180) + np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[0][0])/180) - np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180) + np.sqrt(3)*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180))*((np.sqrt(3)*pi*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180))/180 + (pi*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180))/180 - (pi*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[2][0])/180))/180 + (pi*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180))/180 - (pi*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[2][0])/180))/180 + (np.sqrt(3)*pi*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180 - (np.sqrt(3)*pi*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180 - (np.sqrt(3)*pi*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180))/(np.sqrt(3)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((theta3[1][0]*pi)/180)*np.cos((theta3[2][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180) + np.sqrt(3)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((theta3[0][0]*pi)/180)*np.cos((theta3[2][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180) + np.sqrt(3)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((theta3[0][0]*pi)/180)*np.cos((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) - np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((theta3[2][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180) + np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((theta3[2][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180) + np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((theta3[1][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) - np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((theta3[1][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) - np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) + np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) + np.sqrt(3)*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) + np.sqrt(3)*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) + np.sqrt(3)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180))**2 + (self.rf*np.sin((pi*theta2[0][0])/180)*np.sin((pi*theta3[0][0])/180)*(np.sqrt(3)*np.cos((pi*theta3[1][0])/180)*np.cos((pi*theta3[2][0])/180) + np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[1][0])/180) - np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) + np.sqrt(3)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))*((np.sqrt(3)*pi*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180 + (pi*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[2][0])/180))/180 - (pi*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180 + (pi*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[2][0])/180))/180 - (pi*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180 + (np.sqrt(3)*pi*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180 - (np.sqrt(3)*pi*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180 - (np.sqrt(3)*pi*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180))/(np.sqrt(3)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((theta3[1][0]*pi)/180)*np.cos((theta3[2][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180) + np.sqrt(3)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((theta3[0][0]*pi)/180)*np.cos((theta3[2][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180) + np.sqrt(3)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((theta3[0][0]*pi)/180)*np.cos((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) - np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((theta3[2][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180) + np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((theta3[2][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180) + np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((theta3[1][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) - np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((theta3[1][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) - np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) + np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) + np.sqrt(3)*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) + np.sqrt(3)*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) + np.sqrt(3)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180))**2

        E33 = (self.rf*np.sin((pi*theta2[1][0])/180)*np.sin((pi*theta3[1][0])/180)*((pi*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.sin((pi*theta3[2][0])/180))/180 + (np.sqrt(3)*pi*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[2][0])/180))/180))/(np.sqrt(3)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180) + np.sqrt(3)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[1][0])/180) + np.sqrt(3)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) - np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180) + np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180) + np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[2][0])/180) - np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[2][0])/180) - np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) + np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) + np.sqrt(3)*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) + np.sqrt(3)*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) + np.sqrt(3)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180)) - (self.rf*np.sin((pi*theta2[2][0])/180)*np.sin((pi*theta3[2][0])/180)*((pi*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180))/180 - (np.sqrt(3)*pi*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180))/180))/(np.sqrt(3)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180) + np.sqrt(3)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[1][0])/180) + np.sqrt(3)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) - np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180) + np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180) + np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[2][0])/180) - np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[2][0])/180) - np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) + np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) + np.sqrt(3)*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) + np.sqrt(3)*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180) + np.sqrt(3)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180)) + (self.rf*np.sin((pi*theta2[2][0])/180)*np.sin((pi*theta3[2][0])/180)*(np.sqrt(3)*np.cos((pi*theta3[0][0])/180)*np.cos((pi*theta3[1][0])/180) + np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[0][0])/180) - np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180) + np.sqrt(3)*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180))*((np.sqrt(3)*pi*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[1][0])/180))/180 - (pi*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180))/180 + (pi*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180 - (pi*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180))/180 + (pi*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180 + (np.sqrt(3)*pi*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180 - (np.sqrt(3)*pi*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180 - (np.sqrt(3)*pi*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180))/(np.sqrt(3)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((theta3[1][0]*pi)/180)*np.cos((theta3[2][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180) + np.sqrt(3)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((theta3[0][0]*pi)/180)*np.cos((theta3[2][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180) + np.sqrt(3)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((theta3[0][0]*pi)/180)*np.cos((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) - np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((theta3[2][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180) + np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((theta3[2][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180) + np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((theta3[1][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) - np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((theta3[1][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) - np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) + np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) + np.sqrt(3)*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) + np.sqrt(3)*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) + np.sqrt(3)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180))**2 + (self.rf*np.sin((pi*theta2[1][0])/180)*np.sin((pi*theta3[1][0])/180)*(np.sqrt(3)*np.cos((pi*theta3[0][0])/180)*np.cos((pi*theta3[2][0])/180) - np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*theta3[2][0])/180)*np.sin((pi*theta3[0][0])/180) + np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.sin((pi*theta3[2][0])/180) + np.sqrt(3)*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[2][0])/180))*((np.sqrt(3)*pi*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180 + (pi*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[2][0])/180))/180 - (pi*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180 + (pi*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[1][0])/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[2][0])/180))/180 - (pi*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180 + (np.sqrt(3)*pi*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180 - (np.sqrt(3)*pi*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180 - (np.sqrt(3)*pi*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*theta3[0][0])/180)*np.sin((pi*theta3[1][0])/180)*np.sin((pi*theta3[2][0])/180))/180))/(np.sqrt(3)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((theta3[1][0]*pi)/180)*np.cos((theta3[2][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180) + np.sqrt(3)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((theta3[0][0]*pi)/180)*np.cos((theta3[2][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180) + np.sqrt(3)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((theta3[0][0]*pi)/180)*np.cos((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) - np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((theta3[2][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180) + np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((theta3[2][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180) + np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((theta3[1][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) - np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((theta3[1][0]*pi)/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) - np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.cos((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) + np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) + np.sqrt(3)*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) + np.sqrt(3)*np.cos((pi*(q[0][0] + theta2[0][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[1][0] + theta2[1][0]))/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180) + np.sqrt(3)*np.cos((pi*(q[1][0] + theta2[1][0]))/180)*np.cos((pi*(q[2][0] + theta2[2][0]))/180)*np.sin((pi*(q[0][0] + theta2[0][0]))/180)*np.sin((theta3[0][0]*pi)/180)*np.sin((theta3[1][0]*pi)/180)*np.sin((theta3[2][0]*pi)/180))**2

        E = np.array([[E11,E12,E13],[E21,E22,E23],[E31,E32,E33]])

        return E



e = 44.95*2*np.sqrt(3)/1000 #155.71136760044206     #end effector #115.0
f = 200*2*np.sqrt(3)/1000   #346.41016151377545  #base #457.3
re = 800.0/1000 #232.0
rf = 235.0/1000 #112.0

delta = delta_robot_model(frame_lenght= f, endeffector_lenght= e,
                          upper_link= rf, lower_link= re,
                          upper_link_mass= 1, lower_link_mass= 0.5, endeffector_mass= 2)

q = np.array([[-90, -90, -90]]).T

# rf1_pos,rf2_pos,rf3_pos,end_pos = delta.forward_pose_kinematic(q)
# print(end_pos)
# q = delta.inverse_pose_kinematic(end_pos)

# print(q)

import time

T = np.array([0, 0, 0]).reshape(3, 1)
Fext = np.array([0, 0, 0]).reshape(3, 1)
delta.set_initial_pose([0, 0, 0], "joint")

while True:
    q , qd, qdd = delta.dynamic_model(T, Fext, 0.01)
    # out = np.array([(delta.p * 1000).round(2), delta.q]).reshape(2, 3)
    # print(out)
    time.sleep(1)